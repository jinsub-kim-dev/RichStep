package com.erving.richstep.mock

import com.erving.richstep.transaction.domain.TransactionSearchCondition
import com.erving.richstep.transaction.domain.Transaction
import com.erving.richstep.transaction.service.port.TransactionRepository
import com.erving.richstep.user.domain.User

class FakeTransactionRepository : TransactionRepository {

    private var autoGeneratedId: Long = 1L
    private val data: MutableList<Transaction> = mutableListOf()

    private fun getIdAfterIncrement(): Long {
        return this.autoGeneratedId++
    }

    override fun save(transaction: Transaction): Transaction {
        return if (transaction.id == null) {
            val newTransaction = transaction.copy(id = this.getIdAfterIncrement())
            data.add(newTransaction)
            newTransaction
        } else {
            data.removeIf { it.id == transaction.id }
            data.add(transaction)
            transaction
        }
    }

    override fun findById(id: Long): Transaction? {
        return this.data.find { it.id == id }
    }

    override fun findByCondition(user: User, condition: TransactionSearchCondition): List<Transaction> {
        val dateRange = condition.dateCondition?.resolve()

        return data.filter { transaction ->
            transaction.user.id == user.id &&
            dateRange?.let { (from, to) -> transaction.date in from..to } ?: true &&
            condition.tag?.let { tagName ->
                transaction.transactionTags.any {it.tag.name == tagName}
            } ?: true &&
            condition.type?.let { transactionType -> transaction.type == transactionType } ?: true
        }
    }
}